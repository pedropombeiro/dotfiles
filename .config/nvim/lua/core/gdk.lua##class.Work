---------------- Customizations for GDK --------------------------

if vim.env.GDK_ROOT ~= nil and vim.fn.getcwd() == vim.env.GDK_ROOT .. "/gitlab" then
  local gdk_task_components = {
    "on_complete_notify",
    { "on_complete_dispose", timeout = 60 },
    "display_duration",
    "unique",
    "default",
  }

  vim.api.nvim_create_user_command("CompileDocs", function()
    local task = require("overseer").new_task({
      cmd = "bundle exec rake gitlab:graphql:compile_docs",
      components = gdk_task_components,
    })
    task:start()
  end, {
    desc = "Compile docs",
    nargs = 0,
  })
  vim.api.nvim_create_user_command("CompileDeprecations", function()
    local task = require("overseer").new_task({
      cmd = "bundle exec rake gitlab:graphql:compile_deprecations",
      components = gdk_task_components,
    })
    task:start()
  end, {
    desc = "Compile deprecations",
    nargs = 0,
  })
  vim.api.nvim_create_user_command("CompileRemovals", function()
    local task = require("overseer").new_task({
      cmd = "bundle exec rake gitlab:graphql:compile_removals",
      components = gdk_task_components,
    })
    task:start()
  end, {
    desc = "Compile removals",
    nargs = 0,
  })
  vim.api.nvim_create_user_command("GenerateQueues", function()
    local task = require("overseer").new_task({
      cmd = "bundle exec rake gitlab:sidekiq:all_queues_yml:generate gitlab:sidekiq:sidekiq_queues_yml:generate",
      components = gdk_task_components,
    })
    task:start()
  end, {
    desc = "Generate queues",
    nargs = 0,
  })
  vim.api.nvim_create_user_command("GenerateSchema", function()
    local task = require("overseer").new_task({
      cmd = "bundle exec scripts/regenerate-schema",
      components = gdk_task_components,
    })
    task:start()
  end, {
    desc = "Regenerate schema",
    nargs = 0,
  })
end

local cmd_prefix = "wincmd n | wincmd J | resize10 | setlocal nonumber | setlocal norelativenumber | setlocal laststatus=0 | "
vim.api.nvim_create_user_command("Fgdku", cmd_prefix .. "call termopen('zsh -i -c fgdku') | normal G", {})
vim.api.nvim_create_user_command("RebaseAll", cmd_prefix .. "call termopen('zsh -i -c rebase-all') | normal G", {})
vim.api.nvim_create_user_command("Gsw", "Git switch <args>", { nargs = 1 })
vim.api.nvim_create_user_command("Gswm", cmd_prefix .. "call termopen('zsh -i -c gswm') | normal G", {})
