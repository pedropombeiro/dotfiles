#!/usr/bin/env bash

YADM_SCRIPTS=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")/../scripts" &>/dev/null && pwd)

source "${YADM_SCRIPTS}/colors.sh"

printf "${YELLOW}%s${NC}\n" "Installing helper tools..."

target_dir="${HOME}/opt/bin"
temp_dir="$(mktemp -d)"

bandwhich_version=0.23.1
btop_version=1.4.0
croc_version=10.2.1
fzf_version=0.60.3
gping_version=1.19.0
lnav_version=0.12.4
nvim_version=0.11.0 # Required as mise latest version requires GLIBC 2.31, which is too recent for QTS
procs_version=0.14.9

function download() {
  filename="$(basename "$1")"
  executable="$(basename "$2")"
  version="$(${executable} --version 2>/dev/null)"
  required_version="$3"

  if [[ -n $required_version ]]; then
    if [[ $? -eq 0 ]]; then
      if echo "$version" | grep "$required_version" >/dev/null; then
        printf "${GREEN}%s${NC}\n" "${executable} version ${required_version} is already present."
        return 1
      fi
    fi
  fi

  printf "${GREEN}%s${NC}\n" "Downloading $1..."
  wget -q "$1" -O "${temp_dir}/package.${filename##*.}"
}

function download_and_extract_package() {
  filename="$(basename "$1")"
  executable="$(basename "$2")"
  version="$(${executable} --version 2>/dev/null)"
  required_version="$3"

  download "$@"
  if [[ $? -eq 1 ]]; then
    return 1
  fi

  printf "${GREEN}%s${NC}" "Extracting... "
  echo "${temp_dir}/package.${filename##*.}"
  tar xzvf "${temp_dir}/package.${filename##*.}" --strip-components=1 --directory="$target_dir"/.. --no-same-owner

  version="$($(basename "$2") --version 2>/dev/null)"
  [[ $? -eq 0 ]] && echo "$version"
}

function download_and_extract() {
  filename="$(basename "$1")"
  executable="$(basename "$2")"
  version="$(${executable} --version 2>/dev/null)"
  required_version="$3"

  download "$@"
  if [[ $? -eq 1 ]]; then
    return 1
  fi

  printf "${GREEN}%s${NC}" "Extracting... "
  if [[ ${filename##*.} == 'zip' ]]; then
    extract_zip "$2"
  elif [[ ${filename##*.} == 'gz' ]]; then
    extract_tar "$2"
  else
    extract_tarball "$2"
  fi

  version="$($(basename "$2") --version 2>/dev/null)"
  [[ $? -eq 0 ]] && echo "$version"
}

function extract_zip() {
  unzip -o -j "${temp_dir}/package.zip" -d "${target_dir}" "$1"
  rm -f "${temp_dir}/package.zip"
}

function extract_tar() {
  if [[ $1 == *"/"* ]]; then
    components=$(tr -dc '/' <<<"$1" | awk '{ print length; }')
    tar xzvf "${temp_dir}/package.gz" --directory="${target_dir}" --strip-components="$components" "$1" --no-same-owner
  else
    tar xzvf "${temp_dir}/package.gz" --directory="${target_dir}" "$1" --no-same-owner
  fi

  rm -f "${temp_dir}/package.*"
}

function extract_tarball() {
  if [[ $1 == *"/"* ]]; then
    components=$(tr -dc '/' <<<"$1" | awk '{ print length; }')
    tar xjvf "${temp_dir}/package.tbz" --directory="${target_dir}" --strip-components="$components" "$1" --no-same-owner
  else
    tar xjvf "${temp_dir}/package.tbz" --directory="${target_dir}" "$1" --no-same-owner
  fi

  rm -f "${temp_dir}/package.*"
}


download_and_extract "https://github.com/imsnif/bandwhich/releases/download/v${bandwhich_version}/bandwhich-v${bandwhich_version}-x86_64-unknown-linux-musl.tar.gz" bandwhich $bandwhich_version
download_and_extract "https://github.com/aristocratos/btop/releases/download/v${btop_version}/btop-x86_64-linux-musl.tbz" ./btop/bin/btop $btop_version
download_and_extract "https://github.com/schollz/croc/releases/download/v${croc_version}/croc_v${croc_version}_Linux-64bit.tar.gz" croc $croc_version
download_and_extract "https://github.com/orf/gping/releases/download/gping-v${gping_version}/gping-x86_64-unknown-linux-musl.tar.gz" gping $gping_version
download_and_extract "https://github.com/junegunn/fzf/releases/download/v${fzf_version}/fzf-${fzf_version}-linux_amd64.tar.gz" fzf "$fzf_version"

download_and_extract "https://github.com/tstack/lnav/releases/download/v${lnav_version}/lnav-${lnav_version}-linux-musl-x86_64.zip" "lnav-${lnav_version}/lnav" $lnav_version

download_and_extract_package "https://github.com/neovim/neovim-releases/releases/download/v${nvim_version}/nvim-linux-x86_64.tar.gz" nvim $nvim_version
download_and_extract "https://github.com/dalance/procs/releases/download/v${procs_version}/procs-v${procs_version}-x86_64-linux.zip" procs $procs_version
download_and_extract "https://github.com/pedropombeiro/qnapexporter/releases/latest/download/qnapexporter-linux-amd64.tar.gz" qnapexporter

rm -rf "${temp_dir}"
