#!/usr/bin/env zsh

#
# `fgdku` takes care of updating the GDK taking certain precautions:
# - removes .git/gc.log
# - restores db/structure.sql in case it is out of sync
# - restarts the GDK if the Redis socket disappeared
# - undoes any migrations from the active branch
# - if the Redis socket is still missing, brings GDK back to pristine state
# - precompiles static assets to ensure graphiql-rails changes are picked up
# - prunes and rebases local branches, taking care to preserve branch dependencies
# - ensures there is no orphaned Sidekiq cluster
# - reapplies migrations from active branch
# - runs a simple test in order to bring up Gitaly
# - activates RubyMine if it is running so it can update its indices in the background
# - performs a web request in order to warm up web server
#

source ~/.config/yadm/scripts/colors.sh

(
  cd "${GDK_ROOT}/gitlab" || exit 0

  if [[ $(git diff --shortstat 2>/dev/null | tail -n1) != "" ]]; then
    printf "${RED}%s${NC}\n" 'Please stash the changes in the current branch before calling fgdku!'
    cd - >/dev/null
    exit 1
  fi

  # Reset network adapter if network is not reachable
  if ! ping -c 1 1.1.1.1 >/dev/null; then
    sudo ifconfig en0 down
    sudo ifconfig en0 up
  fi

  curl -s 'http://localhost:8989?action=pulse&green=100'

  rm -rf .git/gc.log
  git restore db/structure.sql

  git fetch

  if [[ ! -S $GDK_ROOT/redis/redis.socket ]]; then
    # Work around issue with Redis socket disappearing by restarting the GDK
    printf "${YELLOW}%s${NC}\n" 'Redis socket disappeared, running gdk restart before update...'
    (cd $GDK_ROOT && gdk restart)
  fi

  mise install
  if ! command -v gdk >/dev/null; then
    # When ruby is upgraded, we don't have the gdk gem, so we need to reinstall it
    gem install gitlab-development-kit
  fi

  set -eo pipefail

  ORIGINAL_BRANCH="$(git_current_branch)"
  MIGRATIONS_DIFF="$(git diff --name-only --diff-filter=A master -- db/schema_migrations/)"
  BRANCH_MIGRATIONS=($(echo ${MIGRATIONS_DIFF} | xargs basename -a | sort -r))
  if [[ ${#BRANCH_MIGRATIONS[@]} -ne 0 ]]; then
    undo-migrations
    git stash push -m "Rolled back migration from ${ORIGINAL_BRANCH}"
  fi

  printf "${YELLOW}%s${NC}\n" 'Updating GDK...'
  set +e
  cd $GDK_ROOT
  gdk update
  if [[ $? -eq 1 && ! -S $GDK_ROOT/redis/redis.socket ]]; then
    # Work around issue with Redis socket disappearing by returning to pristine state and retrying the update
    printf "${YELLOW}%s${NC}\n" 'Redis socket disappeared during update, running gdk pristine before retrying update...'
    gdk pristine
    gdk reconfigure
    gdk update
  fi
  set -eo pipefail

  cd gitlab
  git restore db/structure.sql
  sleep 5

  bundle install # Needed if Ruby version changed

  printf "${YELLOW}%s${NC}\n" 'Precompiling static assets to ensure graphiql-rails changes are picked up...'
  bundle exec rake rake:assets:precompile

  printf "${YELLOW}%s${NC}\n" 'Running simple test...'
  bin/rspec --failure-exit-code 0 --error-exit-code 0 ee/spec/services/ci/runners/stale_group_runners_prune_service_spec.rb

  printf "${YELLOW}%s${NC}\n" 'Pruning local branches...'
  git fetch --all --prune --jobs=10
  set +e
  git branch -vv | grep -E '(origin|security)/.*: gone]' | awk '{print $1}' | grep -v '^_.*$' | xargs git branch -D
  set -e
  printf "${GREEN}%s${NC}\n" "Done."

  printf "${YELLOW}%s${NC}\n" "Rebasing local branches..."
  git restore :/
  rebase-all
  git status --porcelain | grep '^UU ' >/dev/null && return 1
  printf "${GREEN}%s${NC}\n" "Done."

  if [[ "${ORIGINAL_BRANCH}" != "$(git_main_branch)" ]]; then
    if git rev-parse --abbrev-ref "${ORIGINAL_BRANCH}" >/dev/null 2>&1; then
      git switch "${ORIGINAL_BRANCH}"
    fi
  fi

  set +e
  yes | gdk kill # Use kill instead of stop so that services are killed if they can't be stopped (e.g. postgresql)
  set -e
  # Ensure there are no orphaned sidekiq-cluster (https://gitlab.com/gitlab-org/gitlab-development-kit/-/issues/1455)
  pkill -lf 'sidekiq-cluster' || echo 'No stray sidekiq-cluster found'
  gdk start

  if [[ ${#BRANCH_MIGRATIONS[@]} -ne 0 ]]; then
    printf "${YELLOW}%s${NC}\n" 'Applying stash and migrations...'
    git stash pop
    bin/rails db:migrate
    scripts/regenerate-schema # Ensure we have a clean test DB with any branch migrations done
    git restore db/structure.sql
  fi

  if pgrep rubymine; then
    printf "${YELLOW}%s${NC}\n" 'Start indexing in RubyMine...'
    osascript -e 'tell application "RubyMine" to activate'
  fi

  printf "${YELLOW}%s${NC}\n" 'Warming up web server...'
  xh GET --quiet http://gdk.test:3000/api/v4/projects/24/runners PRIVATE-TOKEN:$GITLAB_GDK_TOKEN

  cd - >/dev/null
)

curl -s 'http://localhost:8989?action=light&green=100'
-
